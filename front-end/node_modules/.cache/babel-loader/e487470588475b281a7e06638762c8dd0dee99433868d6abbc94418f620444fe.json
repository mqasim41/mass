{"ast":null,"code":"var _jsxFileName = \"/home/qasim/Sem 5/mass/front-end/src/components/Feed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3000'); // Use the correct server URL\n\nconst Feed = () => {\n  _s();\n  const [imageData, setImageData] = useState(null);\n  useEffect(() => {\n    // Add your WebSocket event listeners here\n    socket.on('image', receivedImageData => {\n      // Handle the received image data (update state, display the image, etc.)\n      setImageData(receivedImageData);\n    });\n\n    // Clean up when the component is unmounted\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [imageData && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `data:image/jpeg;base64,${imageData}` // Assuming the image data is in base64 format\n      ,\n      alt: \"Received Image\",\n      style: {\n        maxWidth: '100%',\n        maxHeight: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), !imageData && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(Feed, \"M4lFU6WvseGt6QPzUzgzw3+EuTU=\");\n_c = Feed;\nexport default Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","Feed","_s","imageData","setImageData","on","receivedImageData","disconnect","children","src","alt","style","maxWidth","maxHeight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/qasim/Sem 5/mass/front-end/src/components/Feed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:3000'); // Use the correct server URL\n\nconst Feed = () => {\n  const [imageData, setImageData] = useState(null);\n\n  useEffect(() => {\n    // Add your WebSocket event listeners here\n    socket.on('image', (receivedImageData) => {\n      // Handle the received image data (update state, display the image, etc.)\n      setImageData(receivedImageData);\n    });\n\n    // Clean up when the component is unmounted\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  return (\n    <div>\n      {/* Display the image if imageData is available */}\n      {imageData && (\n        <img\n          src={`data:image/jpeg;base64,${imageData}`} // Assuming the image data is in base64 format\n          alt=\"Received Image\"\n          style={{ maxWidth: '100%', maxHeight: '100%' }}\n        />\n      )}\n\n      {/* Placeholder or loading message if no image data available */}\n      {!imageData && <p>Loading image...</p>}\n    </div>\n  );\n};\n\nexport default Feed;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMI,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACAI,MAAM,CAACK,EAAE,CAAC,OAAO,EAAGC,iBAAiB,IAAK;MACxC;MACAF,YAAY,CAACE,iBAAiB,CAAC;IACjC,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXN,MAAM,CAACO,UAAU,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA;IAAAS,QAAA,GAEGL,SAAS,iBACRJ,OAAA;MACEU,GAAG,EAAG,0BAAyBN,SAAU,EAAE,CAAC;MAAA;MAC5CO,GAAG,EAAC,gBAAgB;MACpBC,KAAK,EAAE;QAAEC,QAAQ,EAAE,MAAM;QAAEC,SAAS,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CACF,EAGA,CAACd,SAAS,iBAAIJ,OAAA;MAAAS,QAAA,EAAG;IAAgB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV,CAAC;AAACf,EAAA,CA/BID,IAAI;AAAAiB,EAAA,GAAJjB,IAAI;AAiCV,eAAeA,IAAI;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}